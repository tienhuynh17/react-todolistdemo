{"version":3,"sources":["components/Items/index.js","App.js","serviceWorker.js","index.js"],"names":["Items","props","listItems","items","map","item","className","key","type","id","value","onChange","event","updateItem","target","onClick","deleteItem","icon","duration","easing","library","add","fas","App","state","currentItem","handleChange","bind","handleSubmit","handleDelete","handleUpdate","this","setState","Date","now","preventDefault","newItem","newItems","filter","newText","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUA+BeA,MA1Bf,SAAeC,GACX,IACMC,EADQD,EAAME,MACIC,KAAI,SAACC,GAErB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKK,MAAQC,SAAU,SAACC,GAAD,OAAWX,EAAMY,WAAWD,EAAME,OAAOJ,MAAOL,EAAKE,QACpH,8BACI,kBAAC,IAAD,CAAiBQ,QAAS,kBAAMd,EAAMe,WAAWX,EAAKE,MAAMD,UAAU,YAAYW,KAAK,gBAO3G,OACI,6BACI,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAC3BjB,K,eCjBjBkB,IAAQC,IAAIC,K,IA8DGC,E,kDA3DX,WAAYtB,GAAO,IAAD,8BACd,cAAMA,IACDuB,MAAQ,CACTrB,MAAO,GACPsB,YAAY,CACRf,MAAO,GACPH,IAAM,KAId,EAAKmB,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBAbN,E,yDAgBLf,GACTmB,KAAKC,SAAS,CAACP,YAAa,CAACf,MAAOE,EAAME,OAAOJ,MAAOH,IAAK0B,KAAKC,W,mCAGzDtB,GACTA,EAAMuB,iBACN,IAAMC,EAAUL,KAAKP,MAAMC,YAC3B,GAAqB,KAAlBW,EAAQ1B,MAAa,CACpB,IAAM2B,EAAQ,sBAAON,KAAKP,MAAMrB,OAAlB,CAAyBiC,IACvCL,KAAKC,SAAS,CAAC7B,MAAOkC,EAAUZ,YAAa,CAACf,MAAO,GAAIH,IAAK,S,mCAIzDA,GACT,IAAM8B,EAAWN,KAAKP,MAAMrB,MAAMmC,QAAO,SAAAjC,GAAI,OAAIA,EAAKE,MAAQA,KAC9DwB,KAAKC,SAAS,CAAC7B,MAAOkC,M,mCAGbE,EAAShC,GAClB,IAAM8B,EAAWN,KAAKP,MAAMrB,MAC5BkC,EAASjC,KAAI,SAAAC,GACNA,EAAKE,MAAQA,IACZF,EAAKK,MAAQ6B,MAIrBR,KAAKC,SAAS,CAAC7B,MAAOkC,M,+BAItB,OACI,yBAAK/B,UAAY,OACb,gCACI,0BAAMkC,SAAYT,KAAKH,aAAcnB,GAAK,cACtC,2BAAOD,KAAO,OAAOE,MAASqB,KAAKP,MAAMC,YAAYf,MAAOC,SAAYoB,KAAKL,aAAce,YAAc,eACzG,4BAAQjC,KAAO,UAAf,SAGR,kBAAC,EAAD,CAAOL,MAAS4B,KAAKP,MAAMrB,MAAOa,WAAce,KAAKF,aAAchB,WAAckB,KAAKD,oB,GAvDpFY,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.66f723fa.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Items.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction Items(props){\r\n    const items = props.items;\r\n    const listItems = items.map((item) =>\r\n        {\r\n            return <div className=\"list\" key={item.key}>\r\n                <p>\r\n                    <input type=\"text\" id={item.key} value={item.value}  onChange={(event) => props.updateItem(event.target.value, item.key)}/>\r\n                    <span>\r\n                        <FontAwesomeIcon onClick={() => props.deleteItem(item.key)} className=\"iconTrash\" icon=\"trash\" />\r\n                    </span>\r\n                </p>\r\n                \r\n            </div>\r\n        }\r\n    );\r\n    return(\r\n        <div>\r\n            <FlipMove duration={300} easing=\"ease-in-out\">\r\n                {listItems}\r\n            </FlipMove>\r\n        </div>\r\n        \r\n        \r\n    );\r\n}\r\n\r\nexport default Items;","import React from 'react';\nimport './App.css';\nimport Items from './components/Items'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(fas)\n\nclass App extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            items: [],\n            currentItem:{\n                value: '',\n                key : ''\n            }\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n    }\n\n    handleChange(event){\n        this.setState({currentItem: {value: event.target.value, key: Date.now()}});\n    }\n\n    handleSubmit(event){\n        event.preventDefault();\n        const newItem = this.state.currentItem;\n        if(newItem.value !== \"\"){\n            const newItems = [...this.state.items, newItem];\n            this.setState({items: newItems, currentItem: {value: '', key: ''}});\n        }\n    }\n\n    handleDelete(key){\n        const newItems = this.state.items.filter(item => item.key !== key);\n        this.setState({items: newItems});\n    }\n\n    handleUpdate(newText, key){\n        const newItems = this.state.items;\n        newItems.map(item =>{\n            if(item.key === key){\n                item.value = newText;\n            }\n        })\n\n        this.setState({items: newItems});\n    }\n\n    render(){\n        return (\n            <div className = \"App\">\n                <header>\n                    <form onSubmit = {this.handleSubmit} id = \"to-do-form\">\n                        <input type = \"text\" value = {this.state.currentItem.value} onChange = {this.handleChange} placeholder = \"Enter Text\"/>\n                        <button type = \"submit\">Add</button>\n                    </form>\n                </header>\n                <Items items = {this.state.items} deleteItem = {this.handleDelete} updateItem = {this.handleUpdate} ></Items>\n            </div>\n        );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}